import de.undercouch.gradle.tasks.download.Download

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "de.undercouch.download" version "5.4.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'antlr'

sourceCompatibility = 17

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
    implementation "org.projectlombok:lombok:1.18.24"

    antlr "org.antlr:antlr4:4.9.2"

    implementation "com.fasterxml.jackson.core:jackson-annotations:2.7.5"
    implementation "com.github.ben-manes.caffeine:caffeine:3.0.3"
    implementation "com.github.kklisura.cdt:cdt-java-client:2.0.0"
    implementation "com.google.apis:google-api-services-drive:v3-rev129-1.25.0"
    implementation "com.google.apis:google-api-services-sheets:v4-rev492-1.23.0"
    implementation "com.google.apis:google-api-services-slides:v1-rev294-1.23.0"
    implementation "com.squareup.okhttp3:okhttp:3.11.0"
    implementation "commons-io:commons-io:2.6"
    implementation "io.dropwizard:dropwizard-assets:1.2.1"
    implementation "io.github.openfeign:feign-jackson:10.0.1"
    implementation "io.github.openfeign.form:feign-form:3.3.0"
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"
    implementation "one.util:streamex:0.7.2"
    implementation "org.apache.commons:commons-text:1.4"
    implementation "org.apache.httpcomponents:httpmime:4.5.6"
    implementation "org.apache.pdfbox:pdfbox:2.0.11"
    implementation "org.bytedeco:leptonica:1.83.0-1.5.9:$platform"
    implementation "org.bytedeco:openblas:0.3.23-1.5.9:$platform"
    implementation "org.bytedeco:opencv:4.7.0-1.5.9"
    implementation "org.bytedeco:opencv:4.7.0-1.5.9:$platform"
    implementation "org.bytedeco:tesseract:5.3.1-1.5.9"
    implementation "org.bytedeco:tesseract:5.3.1-1.5.9:$platform"
    implementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"
    implementation "org.glassfish.jersey.media:jersey-media-multipart:2.25.1"
    implementation "org.jsoup:jsoup:1.10.3"

    testImplementation "junit:junit:4.12"
    testImplementation "org.assertj:assertj-core:3.11.0"
}

generateGrammarSource {
    outputDirectory = file("src/main/java/com/kyc/snap/antlr")
}

task downloadWordFiles(type: Download) {
    src([
        "http://norvig.com/ngrams/count_1w.txt",
        "http://norvig.com/ngrams/count_2w.txt",
        "http://svn.code.sf.net/p/cmusphinx/code/trunk/cmudict/sphinxdict/cmudict.0.7a_SPHINX_40"
    ])
    dest "data"
}

task downloadTesseractFiles(type: Download) {
    // TODO: This training data is better, but I don't know where I got it from:
    // https://drive.google.com/file/d/1xm710oVrukK3KdTq3xcJ3D__jkJj5EE6/view?usp=sharing
    src "https://github.com/tesseract-ocr/tessdata/raw/3.04.00/eng.traineddata"
    dest "data/tessdata"
}

task downloadFiles(dependsOn: [downloadWordFiles, downloadTesseractFiles]) {}

task run(type: JavaExec) {
    classpath = project.sourceSets.main.runtimeClasspath
    mainClass = "com.kyc.snap.server.SnapServer"
}

task generateWikinet(type: JavaExec) {
    classpath = project.sourceSets.main.runtimeClasspath
    mainClass = "com.kyc.snap.wikinet.Wikinet"
}

test {
    maxHeapSize = "8192m"
}
